---

---

<div class="min-h-screen bg-gradient-to-br from-indigo-50 to-blue-100">
  <div class="container mx-auto px-4 py-8">
    <header
      class="sticky top-0 z-10 bg-gradient-to-r from-blue-600 to-violet-700 backdrop-blur-lg bg-opacity-90 rounded-xl shadow-lg mb-8 py-4 px-6"
    >
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-4xl font-extrabold text-white">Memoraire</h1>
          <p class="text-blue-100">Your personal memory journal</p>
        </div>

        <div class="flex items-center space-x-4">
          <button
            id="logout-btn"
            class="bg-white hover:bg-gray-100 text-violet-700 px-4 py-2 rounded-lg flex items-center transition-all"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M3 3a1 1 0 00-1 1v12a1 1 0 001 1h12a1 1 0 001-1V4a1 1 0 00-1-1H3zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z"
                clip-rule="evenodd"></path>
            </svg>
            Logout
          </button>
        </div>
      </div>
    </header>

    <!-- New Memory Button -->
    <div class="flex justify-end mb-6">
      <button
        id="create-memo-button"
        class="bg-gradient-to-r from-blue-600 to-violet-700 text-white px-5 py-3 rounded-lg flex items-center shadow-md hover:shadow-lg transition-all"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 mr-2"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fill-rule="evenodd"
            d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
            clip-rule="evenodd"></path>
        </svg>
        New Memo
      </button>
    </div>

    <!-- Memory Cards Grid -->
    <div
      id="memories-container"
      class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8"
    >
    </div>
    <script type="module">
      (async () => {
        const token = sessionStorage.getItem("memoraire_token");
        if (!token) {
          sessionStorage.clear();
          localStorage.clear();

          window.location.href = "/";
        }

        function showToast(message) {
          const toast = document.createElement("div");
          toast.className =
            "fixed bottom-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all";
          toast.textContent = message;

          document.body.appendChild(toast);

          setTimeout(() => {
            toast.classList.add("opacity-0");
            setTimeout(() => {
              document.body.removeChild(toast);
            }, 300);
          }, 3000);
        }

        let currentPage = 1;

        async function loadMemories(page = 1) {
          const token = sessionStorage.getItem("memoraire_token");
          if (!token) {
            sessionStorage.clear();
            localStorage.clear();
            window.location.href = "/";
            return;
          }

          try {
            const res = await fetch(`/api/memo?page=${page}`, {
              method: "GET",
              headers: {
                "Content-Type": "application/json",
                memoraire_token: token,
              },
            });

            if (!res.ok) {
              sessionStorage.clear();
              localStorage.clear();
              window.location.href = "/";
              return;
            }

            const memories = await res.json();
            const container = document.getElementById("memories-container");
            container.innerHTML = "";

            //check if memo is not null for page > 1
            if (
              memories.memo &&
              memories.memo.length === 0 &&
              currentPage > 1
            ) {
              currentPage--;
              loadMemories(currentPage);
            }

            // Render memory cards
            if (memories.memo && memories.memo.length > 0) {
              memories.memo.forEach((memory) => {
                const date = new Date(memory.date);
                const days = [
                  "Sunday",
                  "Monday",
                  "Tuesday",
                  "Wednesday",
                  "Thursday",
                  "Friday",
                  "Saturday",
                ];
                const dayName = days[date.getDay()];
                const formattedDate = date.toLocaleDateString("en-US", {
                  month: "short",
                  day: "numeric",
                  year: "numeric",
                });

                const memoryElement = document.createElement("div");
                memoryElement.className =
                  "bg-white rounded-xl shadow-md overflow-hidden hover:shadow-xl transition-all transform hover:-translate-y-1 border border-blue-100 flex flex-col";
                memoryElement.innerHTML = `
                <div class="p-6 flex flex-col h-full">
                  <div class="flex items-center justify-between mb-3">
                    <div class="flex items-center text-sm text-gray-500">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
                      </svg>
                      ${formattedDate}
                    </div>
                    <span class="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-xs font-medium">${dayName}</span>
                  </div>
                  <div class="bg-gradient-to-r from-blue-50 to-violet-50 p-4 rounded-lg flex-grow">
                    <p class="text-gray-800 font-medium line-clamp-3">${memory.note}</p>
                  </div>
                  <div class="mt-4 flex justify-end space-x-3">
                    <button class="edit-memo-btn text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center transition-colors">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                      </svg>
                      Edit
                    </button>
                    <button class="delete-memo-btn text-red-600 hover:text-red-800 text-sm font-medium flex items-center transition-colors" data-id="${memory.ID}">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M6 8a1 1 0 011-1h6a1 1 0 011 1v8a2 2 0 01-2 2H8a2 2 0 01-2-2V8zm5-5a1 1 0 10-2 0v1H5a1 1 0 000 2h10a1 1 0 100-2h-4V3z" clip-rule="evenodd"/>
                      </svg>
                      Delete
                    </button>
                  </div>
                </div>
                `;
                let selectedMemoId = null;
                container.appendChild(memoryElement);

                //delete memo
                const deleteMemoModal =
                  document.getElementById("delete-memo-modal");
                const deleteMemoBtn =
                  memoryElement.querySelector(".delete-memo-btn");
                deleteMemoBtn.addEventListener("click", function () {
                  selectedMemoId = this.getAttribute("data-id");
                  deleteMemoModal.classList.remove("hidden");
                });
                const cancelDeleteBtn =
                  document.getElementById("cancel-delete-btn");
                cancelDeleteBtn.addEventListener("click", function () {
                  deleteMemoModal.classList.add("hidden");
                });

                const confirmDeleteBtn =
                  document.getElementById("confirm-delete-btn");
                confirmDeleteBtn.addEventListener("click", async function () {
                  if (!selectedMemoId) return;
                  const data = {
                    memo_id: selectedMemoId,
                  };

                  console.log("data to delete", data);
                  try {
                    const response = await fetch("/api/memo", {
                      method: "DELETE",
                      headers: {
                        "Content-Type": "application/json",
                        memoraire_token: token,
                      },
                      body: JSON.stringify(data),
                    });

                    const result = await response.json();
                    console.log(result);

                    if (response.ok) {
                      window.location.reload();
                    } else {
                      const responseMessage =
                        result?.message ||
                        "Failed to delete memo. Please try again.";
                      showToast(responseMessage);
                    }
                  } catch (error) {
                    showToast("Network error. Please try again.");
                  } finally {
                    document
                      .getElementById("loading-overlay")
                      ?.classList.add("hidden");
                  }
                });
                //end delete memo

                //edit modal
                const editMemoModal =
                  document.getElementById("edit-memo-modal");
                //edit modal button
                const editMemoBtn =
                  memoryElement.querySelector(".edit-memo-btn");

                //open edit modal
                editMemoBtn?.addEventListener("click", function () {
                  const editMemoModal =
                    document.getElementById("edit-memo-modal");
                  if (!editMemoModal) return;

                  editMemoModal.classList.remove("hidden");

                  const editMemoId =
                    editMemoModal.querySelector("#edit-memo-id");
                  const editMemoDate =
                    editMemoModal.querySelector("#edit-memo-date");
                  const editMemoNote =
                    editMemoModal.querySelector("#edit-memo-note");
                  const charCountDisplay =
                    editMemoModal.querySelector("#edit-char-count");

                  if (editMemoId) editMemoId.value = memory.ID;

                  if (editMemoDate) {
                    // Handle date format
                    const formattedDate = toDateInputFormat(memory.date);
                    editMemoDate.value = formattedDate;
                  }
                  console.log(memory.ID, formattedDate, memory.note);

                  if (editMemoNote) {
                    editMemoNote.value = memory.note;
                    if (charCountDisplay) {
                      charCountDisplay.textContent = `${memory.note.length}/100`;
                    }

                    // Attach char counter
                    editMemoNote.addEventListener("input", function () {
                      charCountDisplay.textContent = `${this.value.length}/100`;
                    });
                  }
                });

                // date converter
                function toDateInputFormat(dateStr) {
                  const date = new Date(dateStr);
                  if (isNaN(date.getTime())) return "";
                  return date.toISOString().split("T")[0];
                }

                const cancelEditMemoBtn =
                  document.getElementById("cancel-edit-memo");
                cancelEditMemoBtn.addEventListener("click", function () {
                  editMemoModal?.classList.add("hidden");
                });
              });

              //submit edit form
              const editMemoForm = document.getElementById("edit-memo-form");
              editMemoForm?.addEventListener("submit", async function (e) {
                e.preventDefault();
                const editMemoModal =
                  document.getElementById("edit-memo-modal");
                editMemoModal?.classList.add("hidden");

                document
                  .getElementById("loading-overlay")
                  ?.classList.remove("hidden");

                const formData = new FormData(editMemoForm);
                const data = {
                  memo_id: formData.get("edit-memo-id"),
                  date: formData.get("edit-memo-date"),
                  note: formData.get("edit-memo-note"),
                };

                try {
                  const response = await fetch("/api/memo", {
                    method: "PUT",
                    headers: {
                      "Content-Type": "application/json",
                      memoraire_token: token,
                    },
                    body: JSON.stringify(data),
                  });

                  const result = await response.json();
                  console.log(result);

                  if (response.ok) {
                    window.location.reload();
                  } else {
                    const responseMessage =
                      result?.message ||
                      "Failed to edit memo. Please try again.";
                    showToast(responseMessage);
                  }
                } catch (error) {
                  showToast("Network error. Please try again.");
                } finally {
                  document
                    .getElementById("loading-overlay")
                    ?.classList.add("hidden");
                }
              });
              //end submit edit form

              document.getElementById("prev-page").disabled = page <= 1;
              document.getElementById("prev-page").style.opacity =
                page <= 1 ? "0.5" : "1";

              document.getElementById("next-page").disabled =
                memories.memo.length < 9;
              document.getElementById("next-page").style.opacity =
                memories.memo.length < 9 ? "0.5" : "1";
            } else {
              container.innerHTML = `
        <div class="col-span-full text-center py-12">
          <div class="bg-white rounded-xl shadow-md p-8 max-w-md mx-auto">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-blue-400 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
            </svg>
            <h3 class="text-xl font-bold text-gray-800 mb-2">No memories yet</h3>
            <p class="text-gray-600 mb-4">Start creating your memory journal by adding your first memory.</p>
            <button id="create-first-memo" class="bg-gradient-to-r from-blue-600 to-violet-700 text-white px-4 py-2 rounded-lg">
              Create First Memory
            </button>
          </div>
        </div>
      `;

              document
                .getElementById("create-first-memo")
                ?.addEventListener("click", function () {
                  document.getElementById("create-memo-button")?.click();
                });
            }
          } catch (err) {
            document.getElementById("memories-container").innerHTML = `
      <div class="col-span-full text-center py-8">
        <div class="bg-red-50 border border-red-200 rounded-xl p-6">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-red-500 mx-auto mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <p class="text-red-700 font-medium">Error loading memories</p>
          <p class="text-red-600 text-sm mt-1">Please try refreshing the page</p>
        </div>
      </div>
    `;
            console.error(err);
          }
        }

        loadMemories(currentPage);

        document.getElementById("prev-page").addEventListener("click", () => {
          if (currentPage > 1) {
            currentPage--;
            loadMemories(currentPage);
          }
        });

        document.getElementById("next-page").addEventListener("click", () => {
          currentPage++;
          loadMemories(currentPage);
        });
      })();
    </script>

    <!-- Pagination -->
    <div class="flex justify-center items-center space-x-4 mt-12 mb-8">
      <button
        id="prev-page"
        class="bg-gradient-to-r from-blue-600 to-violet-700 text-white px-5 py-2 rounded-lg flex items-center transition-all opacity-50"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 mr-1"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fill-rule="evenodd"
            d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
            clip-rule="evenodd"></path>
        </svg>
        Previous
      </button>

      <button
        id="next-page"
        class="bg-gradient-to-r from-blue-600 to-violet-700 text-white px-5 py-2 rounded-lg flex items-center transition-all hover:opacity-90"
      >
        Next
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 ml-1"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fill-rule="evenodd"
            d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
            clip-rule="evenodd"></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Logout Confirmation Modal -->
  <div
    id="logout-modal"
    class="fixed inset-0 bg-black bg-opacity-20 flex items-center justify-center z-50 hidden"
  >
    <div
      class="bg-white rounded-2xl shadow-2xl w-full max-w-md overflow-hidden transform transition-all"
    >
      <div class="bg-gradient-to-r from-blue-600 to-violet-700 px-6 py-4">
        <h3 class="text-xl font-bold text-white">Confirm Logout</h3>
      </div>
      <div class="p-6 space-y-4">
        <p class="text-gray-700">
          Are you sure you want to logout from Memoraire? Your current session
          will end.
        </p>
        <div class="flex items-center justify-end space-x-3 pt-4">
          <button
            id="cancel-logout"
            class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition-colors"
          >
            Cancel
          </button>
          <button
            id="confirm-logout"
            class="px-4 py-2 bg-gradient-to-r from-blue-600 to-violet-700 rounded-lg text-white hover:opacity-90 transition-colors flex items-center"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M3 3a1 1 0 00-1 1v12a1 1 0 001 1h12a1 1 0 001-1V4a1 1 0 00-1-1H3zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z"
                clip-rule="evenodd"></path>
            </svg>
            Logout
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- delete memo modal -->
  <div
    id="delete-memo-modal"
    class="fixed inset-0 bg-black bg-opacity-20 flex items-center justify-center z-50 hidden"
  >
    <div
      class="bg-white rounded-2xl shadow-2xl w-full max-w-md overflow-hidden transform transition-all"
    >
      <div class="bg-gradient-to-r from-red-600 to-pink-700 px-6 py-4">
        <h3 class="text-xl font-bold text-white">Delete Memo</h3>
      </div>
      <div class="p-6 space-y-4">
        <p class="text-gray-700">
          Are you sure you want to delete this memo? This action cannot be
          undone.
        </p>
        <div class="flex items-center justify-end space-x-3 pt-4">
          <button
            id="cancel-delete-btn"
            class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition-colors"
          >
            Cancel
          </button>
          <button
            id="confirm-delete-btn"
            class="px-4 py-2 bg-gradient-to-r from-red-600 to-pink-700 rounded-lg text-white hover:opacity-90 transition-colors flex items-center"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M6 2a1 1 0 00-.894.553L4.382 4H2a1 1 0 000 2h1v10a2 2 0 002 2h10a2 2 0 002-2V6h1a1 1 0 100-2h-2.382l-.724-1.447A1 1 0 0014 2H6zm3 5a1 1 0 112 0v6a1 1 0 11-2 0V7zm-4 1a1 1 0 112 0v5a1 1 0 11-2 0V8zm8 0a1 1 0 112 0v5a1 1 0 11-2 0V8z"
                clip-rule="evenodd"></path>
            </svg>
            Delete
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Create Memo Modal -->
  <div
    id="create-memo-modal"
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden"
  >
    <div
      class="bg-white rounded-2xl shadow-2xl w-full max-w-md overflow-hidden transform transition-all"
    >
      <div class="bg-gradient-to-r from-blue-600 to-violet-700 px-6 py-4">
        <h3 class="text-xl font-bold text-white">Create New Memo</h3>
      </div>
      <div class="p-6">
        <form id="create-memo-form">
          <div class="mb-4">
            <label for="memo-date" class="block text-gray-700 font-medium mb-2"
              >Date</label
            >
            <input
              type="date"
              id="memo-date"
              name="memo-date"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>

          <div class="mb-4">
            <label for="memo-note" class="block text-gray-700 font-medium mb-2"
              >Note (max 100 characters)</label
            >
            <textarea
              id="memo-note"
              name="memo-note"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none"
              rows="4"
              maxlength="100"
              required></textarea>
            <div class="flex justify-end mt-1">
              <span id="char-count" class="text-sm text-gray-500">0/120</span>
            </div>
          </div>

          <div class="flex justify-end space-x-3 mt-6">
            <button
              type="button"
              id="cancel-memo"
              class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              id="save-memo"
              class="px-4 py-2 bg-gradient-to-r from-blue-600 to-violet-700 rounded-lg text-white hover:opacity-90 transition-colors"
            >
              Save Memo
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Edit Memory Modal -->
  <div
    id="edit-memo-modal"
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden"
  >
    <div
      class="bg-white rounded-2xl shadow-2xl w-full max-w-md overflow-hidden transform transition-all"
    >
      <div class="bg-gradient-to-r from-blue-600 to-violet-700 px-6 py-4">
        <h3 class="text-xl font-bold text-white">Edit Memory</h3>
      </div>
      <div class="p-6">
        <form id="edit-memo-form">
          <input type="hidden" id="edit-memo-id" name="edit-memo-id" />
          <div class="mb-4">
            <label
              for="edit-memo-date"
              class="block text-gray-700 font-medium mb-2">Date</label
            >
            <input
              type="date"
              id="edit-memo-date"
              name="edit-memo-date"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>

          <div class="mb-4">
            <label
              for="edit-memo-note"
              class="block text-gray-700 font-medium mb-2"
              >Note (max 100 characters)</label
            >
            <textarea
              id="edit-memo-note"
              name="edit-memo-note"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none"
              rows="4"
              maxlength="100"
              required></textarea>
            <div class="flex justify-end mt-1">
              <span id="edit-char-count" class="text-sm text-gray-500"
                >0/100</span
              >
            </div>
          </div>

          <div class="flex justify-end space-x-3 mt-6">
            <button
              type="button"
              id="cancel-edit-memo"
              class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              id="update-memo"
              class="px-4 py-2 bg-gradient-to-r from-blue-600 to-violet-700 rounded-lg text-white hover:opacity-90 transition-colors"
            >
              Update Memo
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Loading Overlay -->
  <div
    id="loading-overlay"
    class="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 hidden"
  >
    <div class="text-center">
      <div
        class="inline-block w-16 h-16 border-4 border-t-blue-500 border-r-blue-500 border-b-violet-600 border-l-violet-600 rounded-full animate-spin"
      >
      </div>
      <p class="mt-4 text-white font-medium">Loading..</p>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const profileBtn = document.getElementById("profile-btn");
      const loadingOverlay = document.getElementById("loading-overlay");

      //token
      let token = "";
      if (typeof window !== "undefined") {
        if (window.sessionStorage) {
          token = window.sessionStorage.getItem("memoraire_token") || "";
        }
      }

      //logout
      const logoutBtn = document.getElementById("logout-btn");
      const logoutModal = document.getElementById("logout-modal");
      const cancelLogoutBtn = document.getElementById("cancel-logout");
      const confirmLogoutBtn = document.getElementById("confirm-logout");

      logoutBtn?.addEventListener("click", function () {
        logoutModal?.classList.remove("hidden");
        const modalContent = logoutModal?.querySelector("div");
        if (modalContent) {
          modalContent.classList.add("scale-100");
          modalContent.classList.remove("scale-95");
        }
      });

      cancelLogoutBtn?.addEventListener("click", function () {
        closeLogoutModal();
      });

      logoutModal?.addEventListener("click", function (e) {
        if (e.target === logoutModal) {
          closeLogoutModal();
        }
      });

      confirmLogoutBtn?.addEventListener("click", async function () {
        closeLogoutModal();
        showLoadingOverlay();

        try {
          const response = await fetch("/api/logout", {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              memoraire_token: token,
            },
          });

          if (response.ok) {
            if (typeof window !== "undefined") {
              if (window.sessionStorage) {
                window.sessionStorage.clear();
              }

              if (window.localStorage) {
                window.localStorage.clear();
              }
            }

            window.location.href = "/";
          } else {
            showToast("Logout failed. Please try again.");
            hideLoadingOverlay();
          }
        } catch (error) {
          console.error("Logout error:", error);
          showToast("Network error. Please try again.");
          hideLoadingOverlay();
        }
      });

      function closeLogoutModal() {
        if (logoutModal) {
          logoutModal.classList.add("hidden");
        }
      }
      //end logout

      // Create memo
      const createMemoBtn = document.getElementById("create-memo-button");
      const createMemoModal = document.getElementById("create-memo-modal");
      const cancelCreateMemoBtn = document.getElementById("cancel-memo");
      const createMemoForm = document.getElementById(
        "create-memo-form"
      ) as HTMLFormElement;
      const memoNoteInput = document.getElementById("memo-note");
      const charCountDisplay = document.getElementById("char-count");

      // Character counter for memo note
      if (memoNoteInput && charCountDisplay) {
        memoNoteInput.addEventListener("input", function () {
          const currentLength = (this as HTMLTextAreaElement).value.length;
          charCountDisplay.textContent = `${currentLength}/100`;
        });
      }

      createMemoBtn?.addEventListener("click", function () {
        createMemoModal?.classList.remove("hidden");

        const today = new Date().toISOString().split("T")[0];
        (document.getElementById("memo-date") as HTMLInputElement).value =
          today;
      });

      cancelCreateMemoBtn?.addEventListener("click", function () {
        createMemoModal?.classList.add("hidden");
      });

      createMemoForm?.addEventListener("submit", async function (e) {
        e.preventDefault();

        const formData = new FormData(createMemoForm);
        const data = {
          date: formData.get("memo-date"),
          note: formData.get("memo-note"),
        };

        createMemoModal?.classList.add("hidden");
        showLoadingOverlay();

        try {
          const response = await fetch("/api/memo", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              memoraire_token: token,
            },
            body: JSON.stringify(data),
          });

          const result = await response.json();
          console.log(result);

          if (response.ok) {
            window.location.reload();
          } else {
            const responseMessage =
              result?.message || "Failed to create memo. Please try again.";
            showToast(responseMessage);
          }
        } catch (error) {
          showToast("Network error. Please try again.");
        } finally {
          hideLoadingOverlay();
        }
      });
      //end create memo

      profileBtn?.addEventListener("click", function () {
        console.log("Profile clicked");
      });

      function showLoadingOverlay() {
        if (loadingOverlay) {
          loadingOverlay.classList.remove("hidden");
        }
      }

      function hideLoadingOverlay() {
        if (loadingOverlay) {
          loadingOverlay.classList.add("hidden");
        }
      }

      function showToast(message: string) {
        const toast = document.createElement("div");
        toast.className =
          "fixed bottom-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all";
        toast.textContent = message;

        document.body.appendChild(toast);

        setTimeout(() => {
          toast.classList.add("opacity-0");
          setTimeout(() => {
            document.body.removeChild(toast);
          }, 300);
        }, 3000);
      }
    });
  </script>
</div>
