---
const memories = [
  {
    id: 1,
    date: "2025-04-26",
    note: "I went for a long hike today and discovered a beautiful waterfall. The weather was perfect and I took some amazing photos.",
    day: "Saturday",
  },
  {
    id: 2,
    date: "2025-04-25",
    note: "Finished reading that book I've been working on for weeks. The ending was unexpected but satisfying.",
    day: "Friday",
  },
  {
    id: 3,
    date: "2025-04-24",
    note: "Had coffee with an old friend. We caught up on everything that's happened in the past year. Time flies!",
    day: "Thursday",
  },
  {
    id: 4,
    date: "2025-04-23",
    note: "Started learning a new programming language today. It's challenging but exciting to expand my skills.",
    day: "Wednesday",
  },
  {
    id: 5,
    date: "2025-04-22",
    note: "Cooked a new recipe for dinner. It turned out better than expected! Will definitely make it again.",
    day: "Tuesday",
  },
  {
    id: 6,
    date: "2025-04-21",
    note: "Attended a virtual conference today. Learned a lot about new technologies and made some good connections.",
    day: "Monday",
  },
  {
    id: 7,
    date: "2025-04-20",
    note: "I do nothing today. Just relaxed at home, watched movies, and recharged my batteries.",
    day: "Sunday",
  },
  {
    id: 8,
    date: "2025-04-19",
    note: "Went to a concert with friends. The band was amazing live, even better than their recordings.",
    day: "Saturday",
  },
  {
    id: 9,
    date: "2025-04-18",
    note: "Started a new project at work. It's challenging but I'm excited about the opportunity to learn new skills.",
    day: "Friday",
  },
];

const currentPage = 1;
const totalPages = 3;
---

<div class="min-h-screen bg-gradient-to-br from-indigo-50 to-blue-100">
  <div class="container mx-auto px-4 py-8">
    <header
      class="sticky top-0 z-10 bg-gradient-to-r from-blue-600 to-violet-700 backdrop-blur-lg bg-opacity-90 rounded-xl shadow-lg mb-8 py-4 px-6"
    >
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-4xl font-extrabold text-white">Memoraire</h1>
          <p class="text-blue-100">Your personal memory journal</p>
        </div>

        <div class="flex items-center space-x-4">
          <a href="/profile">
            <button
              id="profile-btn"
              class="bg-white text-violet-700 px-4 py-2 rounded-lg flex items-center transition-all hover:bg-opacity-90"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 mr-2"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fill-rule="evenodd"
                  d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z"
                  clip-rule="evenodd"></path>
              </svg>
              Profile
            </button>
          </a>

          <button
            id="logout-btn"
            class="bg-white hover:bg-gray-100 text-violet-700 px-4 py-2 rounded-lg flex items-center transition-all"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M3 3a1 1 0 00-1 1v12a1 1 0 001 1h12a1 1 0 001-1V4a1 1 0 00-1-1H3zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z"
                clip-rule="evenodd"></path>
            </svg>
            Logout
          </button>
        </div>
      </div>
    </header>

    <!-- New Memory Button -->
    <div class="flex justify-end mb-6">
      <button
        id="create-memo-button"
        class="bg-gradient-to-r from-blue-600 to-violet-700 text-white px-5 py-3 rounded-lg flex items-center shadow-md hover:shadow-lg transition-all"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 mr-2"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fill-rule="evenodd"
            d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
            clip-rule="evenodd"></path>
        </svg>
        New Memory
      </button>
    </div>

    <!-- Memory Cards Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
      {
        memories.map((memory) => (
          <div class="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-xl transition-all transform hover:-translate-y-1 border border-blue-100">
            <div class="p-6">
              <div class="text-sm text-gray-500 mb-2 flex items-center">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-4 w-4 mr-1 text-blue-500"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fill-rule="evenodd"
                    d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
                    clip-rule="evenodd"
                  />
                </svg>
                {memory.date}
              </div>
              <div class="text-gray-800 font-medium line-clamp-3">
                {memory.note}
              </div>
            </div>
            <div class="bg-gradient-to-r from-blue-500 to-violet-600 text-white p-3 flex justify-between items-center">
              <span class="text-sm font-medium">{memory.day}</span>
              <div class="flex items-center space-x-2">
                <button class="hover:text-blue-200 transition-colors">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                  </svg>
                </button>
                <button class="hover:text-blue-200 transition-colors">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        ))
      }
    </div>

    <!-- Pagination -->
    <div class="flex justify-center items-center space-x-4 mt-12 mb-8">
      <button
        id="prev-page"
        class="bg-gradient-to-r from-blue-600 to-violet-700 text-white px-5 py-2 rounded-lg flex items-center transition-all opacity-50"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 mr-1"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fill-rule="evenodd"
            d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
            clip-rule="evenodd"></path>
        </svg>
        Previous
      </button>

      <div
        class="text-violet-800 font-medium bg-white bg-opacity-70 px-4 py-2 rounded-lg shadow"
      >
        Page {currentPage} of {totalPages}
      </div>

      <button
        id="next-page"
        class="bg-gradient-to-r from-blue-600 to-violet-700 text-white px-5 py-2 rounded-lg flex items-center transition-all hover:opacity-90"
      >
        Next
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 ml-1"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fill-rule="evenodd"
            d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
            clip-rule="evenodd"></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Logout Confirmation Modal -->
  <div
    id="logout-modal"
    class="fixed inset-0 bg-black bg-opacity-20 flex items-center justify-center z-50 hidden"
  >
    <div
      class="bg-white rounded-2xl shadow-2xl w-full max-w-md overflow-hidden transform transition-all"
    >
      <div class="bg-gradient-to-r from-blue-600 to-violet-700 px-6 py-4">
        <h3 class="text-xl font-bold text-white">Confirm Logout</h3>
      </div>
      <div class="p-6 space-y-4">
        <p class="text-gray-700">
          Are you sure you want to logout from Memoraire? Your current session
          will end.
        </p>
        <div class="flex items-center justify-end space-x-3 pt-4">
          <button
            id="cancel-logout"
            class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition-colors"
          >
            Cancel
          </button>
          <button
            id="confirm-logout"
            class="px-4 py-2 bg-gradient-to-r from-blue-600 to-violet-700 rounded-lg text-white hover:opacity-90 transition-colors flex items-center"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fill-rule="evenodd"
                d="M3 3a1 1 0 00-1 1v12a1 1 0 001 1h12a1 1 0 001-1V4a1 1 0 00-1-1H3zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z"
                clip-rule="evenodd"></path>
            </svg>
            Logout
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Create Memo Modal -->
  <div
    id="create-memo-modal"
    class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden"
  >
    <div
      class="bg-white rounded-2xl shadow-2xl w-full max-w-md overflow-hidden transform transition-all"
    >
      <div class="bg-gradient-to-r from-blue-600 to-violet-700 px-6 py-4">
        <h3 class="text-xl font-bold text-white">Create New Memo</h3>
      </div>
      <div class="p-6">
        <form id="create-memo-form">
          <div class="mb-4">
            <label for="memo-date" class="block text-gray-700 font-medium mb-2"
              >Date</label
            >
            <input
              type="date"
              id="memo-date"
              name="memo-date"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            />
          </div>

          <div class="mb-4">
            <label for="memo-note" class="block text-gray-700 font-medium mb-2"
              >Note (max 120 characters)</label
            >
            <textarea
              id="memo-note"
              name="memo-note"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none"
              rows="4"
              maxlength="120"
              required></textarea>
            <div class="flex justify-end mt-1">
              <span id="char-count" class="text-sm text-gray-500">0/120</span>
            </div>
          </div>

          <div class="flex justify-end space-x-3 mt-6">
            <button
              type="button"
              id="cancel-memo"
              class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              id="save-memo"
              class="px-4 py-2 bg-gradient-to-r from-blue-600 to-violet-700 rounded-lg text-white hover:opacity-90 transition-colors"
            >
              Save Memo
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Loading Overlay -->
  <div
    id="loading-overlay"
    class="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50 hidden"
  >
    <div class="text-center">
      <div
        class="inline-block w-16 h-16 border-4 border-t-blue-500 border-r-blue-500 border-b-violet-600 border-l-violet-600 rounded-full animate-spin"
      >
      </div>
      <p class="mt-4 text-white font-medium">Loading..</p>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const profileBtn = document.getElementById("profile-btn");
      const prevPageBtn = document.getElementById("prev-page");
      const nextPageBtn = document.getElementById("next-page");
      const loadingOverlay = document.getElementById("loading-overlay");

      //logout
      const logoutBtn = document.getElementById("logout-btn");
      const logoutModal = document.getElementById("logout-modal");
      const cancelLogoutBtn = document.getElementById("cancel-logout");
      const confirmLogoutBtn = document.getElementById("confirm-logout");

      logoutBtn?.addEventListener("click", function () {
        logoutModal?.classList.remove("hidden");
        const modalContent = logoutModal?.querySelector("div");
        if (modalContent) {
          modalContent.classList.add("scale-100");
          modalContent.classList.remove("scale-95");
        }
      });

      cancelLogoutBtn?.addEventListener("click", function () {
        closeLogoutModal();
      });

      logoutModal?.addEventListener("click", function (e) {
        if (e.target === logoutModal) {
          closeLogoutModal();
        }
      });

      confirmLogoutBtn?.addEventListener("click", async function () {
        closeLogoutModal();
        showLoadingOverlay();

        try {
          let token = "";
          if (typeof window !== "undefined") {
            if (window.sessionStorage) {
              token = window.sessionStorage.getItem("memoraire_token") || "";
            }
          }
          const response = await fetch("/api/logout", {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              memoraire_token: token,
            },
          });

          if (response.ok) {
            if (typeof window !== "undefined") {
              if (window.sessionStorage) {
                window.sessionStorage.clear();
              }

              if (window.localStorage) {
                window.localStorage.clear();
              }
            }

            window.location.href = "/";
          } else {
            showToast("Logout failed. Please try again.");
            hideLoadingOverlay();
          }
        } catch (error) {
          console.error("Logout error:", error);
          showToast("Network error. Please try again.");
          hideLoadingOverlay();
        }
      });

      function closeLogoutModal() {
        if (logoutModal) {
          logoutModal.classList.add("hidden");
        }
      }
      //end logout

      // Create memo
      const createMemoBtn = document.getElementById("create-memo-button");
      const createMemoModal = document.getElementById("create-memo-modal");
      const cancelCreateMemoBtn = document.getElementById("cancel-memo");
      const createMemoForm = document.getElementById(
        "create-memo-form"
      ) as HTMLFormElement;
      const memoNoteInput = document.getElementById("memo-note");
      const charCountDisplay = document.getElementById("char-count");

      // Character counter for memo note
      if (memoNoteInput && charCountDisplay) {
        memoNoteInput.addEventListener("input", function () {
          const currentLength = (this as HTMLTextAreaElement).value.length;
          charCountDisplay.textContent = `${currentLength}/120`;
        });
      }

      createMemoBtn?.addEventListener("click", function () {
        createMemoModal?.classList.remove("hidden");

        const today = new Date().toISOString().split("T")[0];
        (document.getElementById("memo-date") as HTMLInputElement).value =
          today;
      });

      cancelCreateMemoBtn?.addEventListener("click", function () {
        createMemoModal?.classList.add("hidden");
      });

      createMemoForm?.addEventListener("submit", async function (e) {
        e.preventDefault();

        const formData = new FormData(createMemoForm);
        const data = {
          date: formData.get("memo-date"),
          note: formData.get("memo-note"),
        };

        createMemoModal?.classList.add("hidden");
        showLoadingOverlay();

        try {
          let token = "";
          if (typeof window !== "undefined" && window.sessionStorage) {
            token = window.sessionStorage.getItem("memoraire_token") || "";
          }

          const response = await fetch("/api/memo", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              memoraire_token: token,
            },
            body: JSON.stringify(data),
          });

          const result = await response.json();
          console.log(result);

          if (response.ok) {
            window.location.reload();
          } else {
            const responseMessage =
              result?.message || "Failed to create memo. Please try again.";
            showToast(responseMessage);
          }
        } catch (error) {
          showToast("Network error. Please try again.");
        } finally {
          hideLoadingOverlay();
        }
      });
      //end create memo

      profileBtn?.addEventListener("click", function () {
        console.log("Profile clicked");
      });

      prevPageBtn?.addEventListener("click", function () {
        console.log("Previous page clicked");
      });

      nextPageBtn?.addEventListener("click", function () {
        console.log("Next page clicked");
      });

      function showLoadingOverlay() {
        if (loadingOverlay) {
          loadingOverlay.classList.remove("hidden");
        }
      }

      function hideLoadingOverlay() {
        if (loadingOverlay) {
          loadingOverlay.classList.add("hidden");
        }
      }

      function showToast(message: string) {
        const toast = document.createElement("div");
        toast.className =
          "fixed bottom-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50 transform transition-all";
        toast.textContent = message;

        document.body.appendChild(toast);

        setTimeout(() => {
          toast.classList.add("opacity-0");
          setTimeout(() => {
            document.body.removeChild(toast);
          }, 300);
        }, 3000);
      }
    });
  </script>
</div>
